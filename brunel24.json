{"html":"<html>\n<head>\n<title><\/title>\n<link rel=\"stylesheet\" type=\"text\/css\" href=\"https:\/\/model-viewer-qa.mybluemix.net\/mdlvr\/assets\/1.0.0\/stylesheets\/modelViewerChart.css\"\/>\n<link rel=\"stylesheet\" type=\"text\/css\" href=\"https:\/\/model-viewer-qa.mybluemix.net\/mdlvr\/assets\/1.0.0\/stylesheets\/light\/looks.css\"\/>\n<script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3\/4.2.1\/d3.min.js\"><\/script>\n<script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/topojson\/1.6.20\/topojson.min.js\"><\/script>\n<script src=\"http:\/\/code.jquery.com\/jquery-1.10.2.js\" charset=\"utf-8\"><\/script>\n<script src=\"http:\/\/code.jquery.com\/ui\/1.11.4\/jquery-ui.js\" charset=\"utf-8\"><\/script>\n<script src=\"https:\/\/brunelvis.org\/js\/brunel.2.4.min.js\"<\/script>\n<script src=\"https:\/\/brunelvis.org\/js\/brunel.controls.2.4.min.js\"<\/script>\n<style>\n<\/style>\n<\/head>\n<body>\n<svg id=\"visualization\" width=\"600\" height=\"600\"><\/svg>\n<script>\nfunction  BrunelVis(visId) {\r\n  \"use strict\";                                                                       \/\/ strict mode\r\n  var datasets = [],                                      \/\/ array of datasets for the original data\r\n      pre = function(d, i) { return d },                         \/\/ default pre-process does nothing\r\n      post = function(d, i) { return d },                       \/\/ default post-process does nothing\r\n      transitionTime = 200,                                        \/\/ transition time for animations\r\n      charts = [],                                                       \/\/ the charts in the system\r\n      vis = d3.select('#' + visId).attr('class', 'brunel');                     \/\/ the SVG container\r\n\r\n  BrunelD3.addDefinitions(vis);                                   \/\/ ensure standard symbols present\r\n\r\n  \/\/ Define chart #1 in the visualization \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\n  charts[0] = function(parentNode, filterRows) {\r\n    var geom = BrunelD3.geometry(parentNode || vis.node(), 0, 0, 1, 1, 5, 76, 37, 0),\r\n      elements = [];                                              \/\/ array of elements in this chart\r\n\r\n    \/\/ Define groups for the chart parts \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\n    var chart =  vis.append('g').attr('class', 'chart1')\r\n      .attr('transform','translate(' + geom.chart_left + ',' + geom.chart_top + ')');\r\n    var overlay = chart.append('g').attr('class', 'element').attr('class', 'overlay');\r\n    var zoom = d3.zoom().scaleExtent([1\/3,3]);\r\n    var zoomNode = overlay.append('rect').attr('class', 'overlay')\r\n      .attr('x', geom.inner_left).attr('y', geom.inner_top)\r\n      .attr('width', geom.inner_rawWidth).attr('height', geom.inner_rawHeight)\r\n      .style('cursor', 'move').call(zoom)\r\n      .node();\r\n    zoomNode.__zoom = d3.zoomIdentity;\r\n    chart.append('rect').attr('class', 'background').attr('width', geom.chart_right-geom.chart_left).attr('height', geom.chart_bottom-geom.chart_top);\r\n    var interior = chart.append('g').attr('class', 'interior zoomNone')\r\n      .attr('transform','translate(' + geom.inner_left + ',' + geom.inner_top + ')')\r\n      .attr('clip-path', 'url(#clip_visualization_chart1_inner)');\r\n    interior.append('rect').attr('class', 'inner').attr('width', geom.inner_width).attr('height', geom.inner_height);\r\n    var gridGroup = interior.append('g').attr('class', 'grid');\r\n    var axes = chart.append('g').attr('class', 'axis')\r\n      .attr('transform','translate(' + geom.inner_left + ',' + geom.inner_top + ')');\r\n    vis.select('defs').append('clipPath').attr('id', 'clip_visualization_chart1_inner').append('rect')\r\n      .attr('x', 0).attr('y', 0)\r\n      .attr('width', geom.inner_rawWidth+1).attr('height', geom.inner_rawHeight+1);\r\n\r\n    \/\/ Scales \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\n    var scale_x = d3.scalePoint().padding(0.5)\r\n      .domain(['EV', 'MQ', 'DL', 'UA', '9E', 'AA', 'B6', 'WN', 'US', 'FL', 'VX', 'F9', 'HA', 'AS'])\r\n      .range([0, geom.inner_width]);\r\n    var scale_inner = d3.scaleLinear().domain([0,1])\r\n      .range([-0.5, 0.5]);\r\n    var scale_y = d3.scaleSqrt().domain([0, 1400000.1])\r\n      .range([geom.inner_height, 0]);\r\n    var base_scales = [scale_x, scale_y];                           \/\/ untransformed original scales\r\n\r\n    \/\/ Axes \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\n    axes.append('g').attr('class', 'x axis')\r\n      .attr('transform','translate(0,' + geom.inner_rawHeight + ')')\r\n      .attr('clip-path', 'url(#clip_visualization_chart1_haxis)');\r\n    vis.select('defs').append('clipPath').attr('id', 'clip_visualization_chart1_haxis').append('polyline')\r\n      .attr('points', '-1,-1000, -1,-1 -5,5, -1000,5, -100,1000, 10000,1000 10000,-1000');\r\n    axes.select('g.axis.x').append('text').attr('class', 'title').text('carrier').style('text-anchor', 'middle')\r\n      .attr('x',geom.inner_rawWidth\/2)\r\n      .attr('y', geom.inner_bottom - 2.0).attr('dy','-0.27em');\r\n    axes.append('g').attr('class', 'y axis')\r\n      .attr('clip-path', 'url(#clip_visualization_chart1_vaxis)');\r\n    vis.select('defs').append('clipPath').attr('id', 'clip_visualization_chart1_vaxis').append('polyline')\r\n      .attr('points', '-1000,-10000, 10000,-10000, 10000,' + (geom.inner_rawHeight+1) + ', -1,' + (geom.inner_rawHeight+1) + ', -1,' + (geom.inner_rawHeight+5) + ', -1000,' + (geom.inner_rawHeight+5) );\r\n    axes.select('g.axis.y').append('text').attr('class', 'title').text('Sum(flight)').style('text-anchor', 'middle')\r\n      .attr('x',-geom.inner_rawHeight\/2)\r\n      .attr('y', 4-geom.inner_left).attr('dy', '0.7em').attr('transform', 'rotate(270)');\r\n\r\n    var axis_bottom = d3.axisBottom(scale_x).ticks(Math.min(10, Math.round(geom.inner_width \/ 25.5)));\r\n    var axis_left = d3.axisLeft(scale_y).ticks(Math.min(10, Math.round(geom.inner_width \/ 20)));\r\n\r\n    function buildAxes(time) {\r\n      axis_bottom.tickValues(BrunelD3.filterTicks(scale_x))\r\n      var axis_x = axes.select('g.axis.x');\r\n      BrunelD3.transition(axis_x, time).call(axis_bottom.scale(scale_x));\r\n      var axis_y = axes.select('g.axis.y');\r\n      BrunelD3.transition(axis_y, time).call(axis_left.scale(scale_y));\r\n    }\r\n    zoom.on('zoom', function(t, time) {\r\n        t = t ||BrunelD3.restrictZoom(d3.event.transform, geom, this);\r\n        scale_y = t.rescaleY(base_scales[1]);\r\n        zoomNode.__zoom = t;\r\n        interior.attr('class', 'interior ' + BrunelD3.zoomLabel(t.k));;\r\n        build(time || -1);\r\n    });\r\n\r\n    \/\/ Define element #1 \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\n    elements[0] = function() {\r\n      var original, processed,                           \/\/ data sets passed in and then transformed\r\n        element, data,                                 \/\/ brunel element information and brunel data\r\n        selection, merged;                                      \/\/ d3 selection and merged selection\r\n      var elementGroup = interior.append('g').attr('class', 'element1'),\r\n        main = elementGroup.append('g').attr('class', 'main'),\r\n        labels = BrunelD3.undoTransform(elementGroup.append('g').attr('class', 'labels').attr('aria-hidden', 'true'), elementGroup);\r\n\r\n      function makeData() {\r\n        original = datasets[0];\r\n        if (filterRows) original = original.retainRows(filterRows);\r\n        processed = pre(original, 0)\r\n          .summarize('flight=flight:sum; carrier=carrier:base')\r\n          .sort('flight');\r\n        processed = post(processed, 0);\r\n        var f0 = processed.field('carrier'),\r\n          f1 = processed.field('flight'),\r\n          f2 = processed.field('#row'),\r\n          f3 = processed.field('#selection');\r\n        var keyFunc = function(d) { return f0.value(d) };\r\n        data = {\r\n          carrier:      function(d) { return f0.value(d.row) },\r\n          flight:       function(d) { return f1.value(d.row) },\r\n          $row:         function(d) { return f2.value(d.row) },\r\n          $selection:   function(d) { return f3.value(d.row) },\r\n          carrier_f:    function(d) { return f0.valueFormatted(d.row) },\r\n          flight_f:     function(d) { return f1.valueFormatted(d.row) },\r\n          $row_f:       function(d) { return f2.valueFormatted(d.row) },\r\n          $selection_f: function(d) { return f3.valueFormatted(d.row) },\r\n          _split:       function(d) { return 'ALL' },\r\n          _key:         keyFunc,\r\n          _rows:        BrunelD3.makeRowsWithKeys(keyFunc, processed.rowCount())\r\n        };\r\n      }\r\n\r\n      \/\/ Build element from data \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\n      function build(transitionMillis) {\r\n        element = elements[0];\r\n        var w = 0.9 * Math.abs(scale_x(scale_x.domain()[1]) - scale_x(scale_x.domain()[0]) );\r\n        var x = function(d) { return scale_x(data.carrier(d))};\r\n        var h = geom.default_point_size;\r\n        var y1 = scale_y.range()[0];\r\n        var y2 = function(d) { return scale_y(data.flight(d))};\r\n\r\n        \/\/ Define selection entry operations\r\n        function initialState(selection) {\r\n          selection\r\n            .attr('class', 'element bar filled')\r\n        }\r\n\r\n        \/\/ Define selection update operations on merged data\r\n        function updateState(selection) {\r\n          selection\r\n            .each(function(d) {\r\n              var width = w, left = x(d) - width\/2, \r\n              c = y1, d = y2(d), top = Math.min(c,d), height = Math.max(1e-6, Math.abs(c-d));\r\n              this.r = {x:left, y:top, w:width, h:height};\r\n            })\r\n            .attr('x', function(d) { return this.r.x })\r\n            .attr('y', function(d) { return this.r.y })\r\n            .attr('width', function(d) { return this.r.w })\r\n            .attr('height', function(d) { return this.r.h });\r\n        }\r\n\r\n        \/\/ Define labeling for the selection\r\n        function label(selection, transitionMillis) {\r\n\r\n          var tooltipLabeling  = {\r\n            index: -1, method: 'box', location: ['center', 'top'], inside: true, align: 'middle', pad: 0, dy: 0.7,\r\n            fit: true, granularity: 0,\r\n            content: function(d) {\r\n              return d.row == null ? null : '<span class=\"title\">carrier: <\/span>'\n\t\t\t+ '<span class=\"field\">' + data.carrier_f(d) + '<\/span>'\n\t\t\t+ '<br\/>'\n\t\t\t+ '<span class=\"title\">Sum(flight): <\/span>'\n\t\t\t+ '<span class=\"field\">' + data.flight_f(d) + '<\/span>'\r\n            }\r\n          };\r\n          BrunelD3.addTooltip(selection, tooltipLabeling, geom);\r\n        }\r\n        \/\/ Create selections, set the initial state and transition updates\r\n        selection = main.selectAll('.element').data(data._rows, function(d) { return d.key });\r\n        var added = selection.enter().append('rect');\r\n        merged = selection.merge(added);\r\n        initialState(added);\r\n        selection.filter(BrunelD3.hasData)\r\n          .classed('selected', BrunelD3.isSelected(data))\r\n          .filter(BrunelD3.isSelected(data)).raise();\r\n        updateState(BrunelD3.transition(merged, transitionMillis));\r\n        label(merged, transitionMillis);\r\n\r\n        BrunelD3.transition(selection.exit(), transitionMillis\/3)\r\n          .style('opacity', 0.5).each( function() {\r\n            this.remove(); BrunelD3.removeLabels(this); \r\n        });\r\n      }\r\n\r\n      return {\r\n        data:           function() { return processed },\r\n        original:       function() { return original },\r\n        internal:       function() { return data },\r\n        selection:      function() { return merged },\r\n        makeData:       makeData,\r\n        build:          build,\r\n        chart:          function() { return charts[0] },\r\n        group:          function() { return elementGroup },\r\n        fields: {\r\n          x:            ['carrier'],\r\n          y:            ['flight'],\r\n          key:          ['carrier']\r\n        }\r\n      };\r\n    }();\r\n\r\n    function build(time, noData) {\r\n      var first = elements[0].data() == null;\r\n      if (first) time = 0;                                           \/\/ no transition for first call\r\n      buildAxes(time);\r\n      if ((first || time > -1) && !noData) {\r\n        elements[0].makeData();\r\n      }\r\n      elements[0].build(time);\r\n    }\r\n\r\n    \/\/ Expose the following components of the chart\r\n    return {\r\n      elements : elements,\r\n      interior : interior,\r\n      scales: {x:scale_x, y:scale_y},\r\n      zoom: function(params, time) {\r\n          if (params) zoom.on('zoom').call(zoomNode, params, time);\r\n          return d3.zoomTransform(zoomNode);\r\n      },\r\n      build : build\r\n    };\r\n    }();\r\n\r\n  function setData(rowData, i) { datasets[i||0] = BrunelD3.makeData(rowData) }\r\n  function updateAll(time) { charts.forEach(function(x) {x.build(time || 0)}) }\r\n  function buildAll() {\r\n    for (var i=0;i<arguments.length;i++) setData(arguments[i], i);\r\n    updateAll(transitionTime);\r\n  }\r\n\r\n  return {\r\n    dataPreProcess:     function(f) { if (f) pre = f; return pre },\r\n    dataPostProcess:    function(f) { if (f) post = f; return post },\r\n    data:               function(d,i) { if (d) setData(d,i); return datasets[i||0] },\r\n    visId:              visId,\r\n    build:              buildAll,\r\n    rebuild:            updateAll,\r\n    charts:             charts\r\n  }\r\n}\r\n\r\n\/\/ Data Tables \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\nvar table1 = {\r\n   summarized: true,\r\n   names: ['carrier', 'flight'], \r\n   options: ['string', 'numeric'], \r\n   rows: [['9E', 306732], ['AA', 198606], ['AS', 47], ['B6', 168962], ['DL', 408236],\r\n  ['EV', 1275749], ['F9', 3527], ['FL', 11556], ['HA', 102], ['MQ', 746737], ['UA', 375477],\r\n  ['US', 96243], ['VX', 6457], ['WN', 136715]]\r\n};\r\n\r\n\/\/ Call Code to Build the system \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\nvar v  = new BrunelVis('visualization');\r\nv.build(table1);\r\n\n<\/script>\n<\/body>\n<\/html>\n"}